GET_ABOUT, variables {},â€¦}: 

{"operationName":"GET_ABOUT","variables":{},"query":"fragment ABOUT_WEBUI on AboutWebUI {\n  channel\n  tag\n  __typename\n}\n\nquery GET_ABOUT {\n  aboutServer {\n    buildTime\n    buildType\n    discord\n    github\n    name\n    revision\n    version\n    __typename\n  }\n  aboutWebUI {\n    ...ABOUT_WEBUI\n    __typename\n  }\n}"}

GET_CATEGORIES_LIBRARY

{"operationName":"GET_CATEGORIES_LIBRARY","variables":{"order":[{"by":"ORDER"}]},"query":"fragment CATEGORY_BASE_FIELDS on CategoryType {\n  id\n  name\n  default\n  order\n  __typename\n}\n\nfragment CATEGORY_META_FIELDS on CategoryMetaType {\n  categoryId\n  key\n  value\n  __typename\n}\n\nfragment CATEGORY_LIBRARY_FIELDS on CategoryType {\n  ...CATEGORY_BASE_FIELDS\n  meta {\n    ...CATEGORY_META_FIELDS\n    __typename\n  }\n  mangas {\n    totalCount\n    __typename\n  }\n  __typename\n}\n\nfragment PAGE_INFO on PageInfo {\n  endCursor\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  __typename\n}\n\nquery GET_CATEGORIES_LIBRARY($after: Cursor, $before: Cursor, $condition: CategoryConditionInput, $filter: CategoryFilterInput, $first: Int, $last: Int, $offset: Int, $order: [CategoryOrderInput!]) {\n  categories(\n    after: $after\n    before: $before\n    condition: $condition\n    filter: $filter\n    first: $first\n    last: $last\n    offset: $offset\n    order: $order\n  ) {\n    nodes {\n      ...CATEGORY_LIBRARY_FIELDS\n      __typename\n    }\n    pageInfo {\n      ...PAGE_INFO\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}"}

GET_CATEGORY_MANGAS

{"operationName":"GET_CATEGORY_MANGAS","variables":{"id":0},"query":"fragment MANGA_BASE_FIELDS on MangaType {\n  id\n  title\n  thumbnailUrl\n  thumbnailUrlLastFetched\n  inLibrary\n  initialized\n  sourceId\n  __typename\n}\n\nfragment MANGA_CHAPTER_STAT_FIELDS on MangaType {\n  id\n  unreadCount\n  downloadCount\n  bookmarkCount\n  hasDuplicateChapters\n  chapters {\n    totalCount\n    __typename\n  }\n  __typename\n}\n\nfragment MANGA_CHAPTER_NODE_FIELDS on MangaType {\n  firstUnreadChapter {\n    id\n    sourceOrder\n    isRead\n    mangaId\n    __typename\n  }\n  lastReadChapter {\n    id\n    sourceOrder\n    lastReadAt\n    __typename\n  }\n  latestReadChapter {\n    id\n    sourceOrder\n    lastReadAt\n    __typename\n  }\n  latestFetchedChapter {\n    id\n    fetchedAt\n    __typename\n  }\n  latestUploadedChapter {\n    id\n    uploadDate\n    __typename\n  }\n  __typename\n}\n\nfragment MANGA_LIBRARY_FIELDS on MangaType {\n  ...MANGA_BASE_FIELDS\n  ...MANGA_CHAPTER_STAT_FIELDS\n  ...MANGA_CHAPTER_NODE_FIELDS\n  genre\n  lastFetchedAt\n  inLibraryAt\n  status\n  artist\n  author\n  description\n  source {\n    id\n    displayName\n    __typename\n  }\n  trackRecords {\n    totalCount\n    nodes {\n      id\n      trackerId\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment PAGE_INFO on PageInfo {\n  endCursor\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  __typename\n}\n\nquery GET_CATEGORY_MANGAS($id: Int!) {\n  category(id: $id) {\n    id\n    mangas {\n      nodes {\n        ...MANGA_LIBRARY_FIELDS\n        __typename\n      }\n      pageInfo {\n        ...PAGE_INFO\n        __typename\n      }\n      totalCount\n      __typename\n    }\n    __typename\n  }\n}"}

GET_DOWNLOAD_STATUS

{"operationName":"GET_DOWNLOAD_STATUS","variables":{},"query":"fragment DOWNLOAD_TYPE_FIELDS on DownloadType {\n  chapter {\n    id\n    name\n    sourceOrder\n    isDownloaded\n    __typename\n  }\n  manga {\n    id\n    title\n    downloadCount\n    __typename\n  }\n  progress\n  state\n  tries\n  __typename\n}\n\nfragment DOWNLOAD_STATUS_FIELDS on DownloadStatus {\n  state\n  queue {\n    ...DOWNLOAD_TYPE_FIELDS\n    __typename\n  }\n  __typename\n}\n\nquery GET_DOWNLOAD_STATUS {\n  downloadStatus {\n    ...DOWNLOAD_STATUS_FIELDS\n    __typename\n  }\n}"}

GET_GLOBAL_METADATAS

{"operationName":"GET_GLOBAL_METADATAS","variables":{},"query":"fragment GLOBAL_METADATA on GlobalMetaType {\n  key\n  value\n  __typename\n}\n\nfragment PAGE_INFO on PageInfo {\n  endCursor\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  __typename\n}\n\nquery GET_GLOBAL_METADATAS($after: Cursor, $before: Cursor, $condition: MetaConditionInput, $filter: MetaFilterInput, $first: Int, $last: Int, $offset: Int, $order: [MetaOrderInput!]) {\n  metas(\n    after: $after\n    before: $before\n    condition: $condition\n    filter: $filter\n    first: $first\n    last: $last\n    offset: $offset\n    order: $order\n  ) {\n    nodes {\n      ...GLOBAL_METADATA\n      __typename\n    }\n    pageInfo {\n      ...PAGE_INFO\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}"}


GET_LAST_UPDATE_TIMESTAMP

{"operationName":"GET_LAST_UPDATE_TIMESTAMP","variables":{},"query":"query GET_LAST_UPDATE_TIMESTAMP {\n  lastUpdateTimestamp {\n    timestamp\n    __typename\n  }\n}"}


GET_LIBRARY_MANGA_COUNT

{"operationName":"GET_LIBRARY_MANGA_COUNT","variables":{},"query":"query GET_LIBRARY_MANGA_COUNT {\n  mangas(condition: {inLibrary: true}) {\n    totalCount\n    __typename\n  }\n}"}

GET_SERVER_SETTINGS

{"operationName":"GET_SERVER_SETTINGS","variables":{},"query":"fragment SERVER_SETTINGS on SettingsType {\n  ip\n  port\n  socksProxyEnabled\n  socksProxyVersion\n  socksProxyHost\n  socksProxyPort\n  socksProxyUsername\n  socksProxyPassword\n  webUIFlavor\n  initialOpenInBrowserEnabled\n  webUIInterface\n  electronPath\n  webUIChannel\n  webUIUpdateCheckInterval\n  downloadAsCbz\n  downloadsPath\n  autoDownloadNewChapters\n  excludeEntryWithUnreadChapters\n  autoDownloadNewChaptersLimit\n  autoDownloadIgnoreReUploads\n  extensionRepos\n  maxSourcesInParallel\n  excludeUnreadChapters\n  excludeNotStarted\n  excludeCompleted\n  globalUpdateInterval\n  updateMangas\n  basicAuthEnabled\n  basicAuthUsername\n  basicAuthPassword\n  debugLogsEnabled\n  systemTrayEnabled\n  maxLogFileSize\n  maxLogFiles\n  maxLogFolderSize\n  backupPath\n  backupTime\n  backupInterval\n  backupTTL\n  localSourcePath\n  flareSolverrEnabled\n  flareSolverrUrl\n  flareSolverrTimeout\n  flareSolverrSessionName\n  flareSolverrSessionTtl\n  flareSolverrAsResponseFallback\n  __typename\n}\n\nquery GET_SERVER_SETTINGS {\n  settings {\n    ...SERVER_SETTINGS\n    __typename\n  }\n}"}

GET_TRACKERS_SETTINGS

{"operationName":"GET_TRACKERS_SETTINGS","variables":{},"query":"fragment PAGE_INFO on PageInfo {\n  endCursor\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  __typename\n}\n\nfragment TRACKER_BASE_FIELDS on TrackerType {\n  id\n  name\n  icon\n  isLoggedIn\n  isTokenExpired\n  __typename\n}\n\nfragment TRACKER_SETTING_FIELDS on TrackerType {\n  ...TRACKER_BASE_FIELDS\n  authUrl\n  __typename\n}\n\nquery GET_TRACKERS_SETTINGS {\n  trackers {\n    totalCount\n    pageInfo {\n      ...PAGE_INFO\n      __typename\n    }\n    nodes {\n      ...TRACKER_SETTING_FIELDS\n      __typename\n    }\n    __typename\n  }\n}"}

GET_UPDATE_STATUS

{"operationName":"GET_UPDATE_STATUS","variables":{},"query":"fragment UPDATER_JOB_INFO_FIELDS on UpdaterJobsInfoType {\n  isRunning\n  totalJobs\n  finishedJobs\n  skippedCategoriesCount\n  skippedMangasCount\n  __typename\n}\n\nfragment UPDATER_CATEGORY_FIELDS on CategoryUpdateType {\n  status\n  category {\n    id\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment UPDATER_MANGA_FIELDS on MangaUpdateType {\n  status\n  manga {\n    id\n    title\n    thumbnailUrl\n    __typename\n  }\n  __typename\n}\n\nfragment UPDATER_STATUS_FIELDS on LibraryUpdateStatus {\n  jobsInfo {\n    ...UPDATER_JOB_INFO_FIELDS\n    __typename\n  }\n  categoryUpdates {\n    ...UPDATER_CATEGORY_FIELDS\n    __typename\n  }\n  mangaUpdates {\n    ...UPDATER_MANGA_FIELDS\n    __typename\n  }\n  __typename\n}\n\nquery GET_UPDATE_STATUS {\n  libraryUpdateStatus {\n    ...UPDATER_STATUS_FIELDS\n    __typename\n  }\n}"}

GET_WEBUI_UPDATE_STATUS

{"operationName":"GET_WEBUI_UPDATE_STATUS","variables":{},"query":"fragment WEBUI_UPDATE_INFO on WebUIUpdateInfo {\n  channel\n  tag\n  __typename\n}\n\nfragment WEBUI_UPDATE_STATUS on WebUIUpdateStatus {\n  info {\n    ...WEBUI_UPDATE_INFO\n    __typename\n  }\n  progress\n  state\n  __typename\n}\n\nquery GET_WEBUI_UPDATE_STATUS {\n  getWebUIUpdateStatus {\n    ...WEBUI_UPDATE_STATUS\n    __typename\n  }\n}"}

GET_MANGA_SCREEN

{"operationName":"GET_MANGA_SCREEN","variables":{"id":87},"query":"fragment MANGA_BASE_FIELDS on MangaType {\n  id\n  title\n  thumbnailUrl\n  thumbnailUrlLastFetched\n  inLibrary\n  initialized\n  sourceId\n  __typename\n}\n\nfragment MANGA_CHAPTER_STAT_FIELDS on MangaType {\n  id\n  unreadCount\n  downloadCount\n  bookmarkCount\n  hasDuplicateChapters\n  chapters {\n    totalCount\n    __typename\n  }\n  __typename\n}\n\nfragment MANGA_CHAPTER_NODE_FIELDS on MangaType {\n  firstUnreadChapter {\n    id\n    sourceOrder\n    isRead\n    mangaId\n    __typename\n  }\n  lastReadChapter {\n    id\n    sourceOrder\n    lastReadAt\n    __typename\n  }\n  latestReadChapter {\n    id\n    sourceOrder\n    lastReadAt\n    __typename\n  }\n  latestFetchedChapter {\n    id\n    fetchedAt\n    __typename\n  }\n  latestUploadedChapter {\n    id\n    uploadDate\n    __typename\n  }\n  __typename\n}\n\nfragment MANGA_LIBRARY_FIELDS on MangaType {\n  ...MANGA_BASE_FIELDS\n  ...MANGA_CHAPTER_STAT_FIELDS\n  ...MANGA_CHAPTER_NODE_FIELDS\n  genre\n  lastFetchedAt\n  inLibraryAt\n  status\n  artist\n  author\n  description\n  source {\n    id\n    displayName\n    __typename\n  }\n  trackRecords {\n    totalCount\n    nodes {\n      id\n      trackerId\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment MANGA_SCREEN_FIELDS on MangaType {\n  ...MANGA_LIBRARY_FIELDS\n  artist\n  author\n  description\n  status\n  realUrl\n  sourceId\n  source {\n    id\n    displayName\n    __typename\n  }\n  trackRecords {\n    totalCount\n    nodes {\n      id\n      trackerId\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nquery GET_MANGA_SCREEN($id: Int!) {\n  manga(id: $id) {\n    ...MANGA_SCREEN_FIELDS\n    __typename\n  }\n}"}

GET_CHAPTERS_MANGA

{"operationName":"GET_CHAPTERS_MANGA","variables":{"condition":{"mangaId":87},"order":[{"by":"SOURCE_ORDER","byType":"DESC"}]},"query":"fragment CHAPTER_BASE_FIELDS on ChapterType {\n  id\n  name\n  mangaId\n  scanlator\n  realUrl\n  sourceOrder\n  chapterNumber\n  __typename\n}\n\nfragment CHAPTER_STATE_FIELDS on ChapterType {\n  id\n  isRead\n  isDownloaded\n  isBookmarked\n  __typename\n}\n\nfragment CHAPTER_LIST_FIELDS on ChapterType {\n  ...CHAPTER_BASE_FIELDS\n  ...CHAPTER_STATE_FIELDS\n  fetchedAt\n  uploadDate\n  lastReadAt\n  __typename\n}\n\nfragment PAGE_INFO on PageInfo {\n  endCursor\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  __typename\n}\n\nquery GET_CHAPTERS_MANGA($after: Cursor, $before: Cursor, $condition: ChapterConditionInput, $filter: ChapterFilterInput, $first: Int, $last: Int, $offset: Int, $order: [ChapterOrderInput!]) {\n  chapters(\n    after: $after\n    before: $before\n    condition: $condition\n    filter: $filter\n    first: $first\n    last: $last\n    offset: $offset\n    order: $order\n  ) {\n    nodes {\n      ...CHAPTER_LIST_FIELDS\n      __typename\n    }\n    pageInfo {\n      ...PAGE_INFO\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}"}


GET_MANGA_READER

{"operationName":"GET_MANGA_READER","variables":{"id":87},"query":"fragment MANGA_BASE_FIELDS on MangaType {\n  id\n  title\n  thumbnailUrl\n  thumbnailUrlLastFetched\n  inLibrary\n  initialized\n  sourceId\n  __typename\n}\n\nfragment MANGA_META_FIELDS on MangaMetaType {\n  mangaId\n  key\n  value\n  __typename\n}\n\nfragment SOURCE_BASE_FIELDS on SourceType {\n  id\n  name\n  displayName\n  __typename\n}\n\nfragment MANGA_READER_FIELDS on MangaType {\n  ...MANGA_BASE_FIELDS\n  genre\n  source {\n    ...SOURCE_BASE_FIELDS\n    __typename\n  }\n  meta {\n    ...MANGA_META_FIELDS\n    __typename\n  }\n  chapters {\n    totalCount\n    __typename\n  }\n  trackRecords {\n    totalCount\n    __typename\n  }\n  __typename\n}\n\nquery GET_MANGA_READER($id: Int!) {\n  manga(id: $id) {\n    ...MANGA_READER_FIELDS\n    __typename\n  }\n}"}

GET_CHAPTERS_READER

{"operationName":"GET_CHAPTERS_READER","variables":{"condition":{"mangaId":87},"order":[{"by":"SOURCE_ORDER","byType":"DESC"}]},"query":"fragment CHAPTER_BASE_FIELDS on ChapterType {\n  id\n  name\n  mangaId\n  scanlator\n  realUrl\n  sourceOrder\n  chapterNumber\n  __typename\n}\n\nfragment CHAPTER_STATE_FIELDS on ChapterType {\n  id\n  isRead\n  isDownloaded\n  isBookmarked\n  __typename\n}\n\nfragment CHAPTER_READER_FIELDS on ChapterType {\n  ...CHAPTER_BASE_FIELDS\n  ...CHAPTER_STATE_FIELDS\n  uploadDate\n  lastPageRead\n  pageCount\n  __typename\n}\n\nfragment PAGE_INFO on PageInfo {\n  endCursor\n  hasNextPage\n  hasPreviousPage\n  startCursor\n  __typename\n}\n\nquery GET_CHAPTERS_READER($after: Cursor, $before: Cursor, $condition: ChapterConditionInput, $filter: ChapterFilterInput, $first: Int, $last: Int, $offset: Int, $order: [ChapterOrderInput!]) {\n  chapters(\n    after: $after\n    before: $before\n    condition: $condition\n    filter: $filter\n    first: $first\n    last: $last\n    offset: $offset\n    order: $order\n  ) {\n    nodes {\n      ...CHAPTER_READER_FIELDS\n      __typename\n    }\n    pageInfo {\n      ...PAGE_INFO\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}"}

GET_CHAPTER_PAGES_FETCH

{"operationName":"GET_CHAPTER_PAGES_FETCH","variables":{"input":{"chapterId":513}},"query":"mutation GET_CHAPTER_PAGES_FETCH($input: FetchChapterPagesInput!) {\n  fetchChapterPages(input: $input) {\n    chapter {\n      id\n      pageCount\n      __typename\n    }\n    pages\n    __typename\n  }\n}"}


GET_SOURCES_LIST

{"operationName":"GET_SOURCES_LIST","variables":{},"query":"fragment SOURCE_BASE_FIELDS on SourceType {\n  id\n  name\n  displayName\n  __typename\n}\n\nfragment SOURCE_LIST_FIELDS on SourceType {\n  ...SOURCE_BASE_FIELDS\n  lang\n  iconUrl\n  isNsfw\n  isConfigurable\n  supportsLatest\n  extension {\n    pkgName\n    repo\n    __typename\n  }\n  __typename\n}\n\nquery GET_SOURCES_LIST {\n  sources {\n    nodes {\n      ...SOURCE_LIST_FIELDS\n      __typename\n    }\n    __typename\n  }\n}"}

GET_SOURCE_MANGAS_FETCH

{"operationName":"GET_SOURCE_MANGAS_FETCH","variables":{"input":{"type":"POPULAR","source":"4630910107107422596","page":1}},"query":"fragment MANGA_BASE_FIELDS on MangaType {\n  id\n  title\n  thumbnailUrl\n  thumbnailUrlLastFetched\n  inLibrary\n  initialized\n  sourceId\n  __typename\n}\n\nmutation GET_SOURCE_MANGAS_FETCH($input: FetchSourceMangaInput!) {\n  fetchSourceManga(input: $input) {\n    hasNextPage\n    mangas {\n      ...MANGA_BASE_FIELDS\n      __typename\n    }\n    __typename\n  }\n}"}

GET_SOURCE_BROWSE

{"operationName":"GET_SOURCE_BROWSE","variables":{"id":"4630910107107422596"},"query":"fragment SOURCE_BASE_FIELDS on SourceType {\n  id\n  name\n  displayName\n  __typename\n}\n\nfragment SOURCE_META_FIELDS on SourceMetaType {\n  sourceId\n  key\n  value\n  __typename\n}\n\nfragment SOURCE_BROWSE_FIELDS on SourceType {\n  ...SOURCE_BASE_FIELDS\n  isConfigurable\n  supportsLatest\n  meta {\n    ...SOURCE_META_FIELDS\n    __typename\n  }\n  filters {\n    ... on CheckBoxFilter {\n      type: __typename\n      CheckBoxFilterDefault: default\n      name\n    }\n    ... on HeaderFilter {\n      type: __typename\n      name\n    }\n    ... on SelectFilter {\n      type: __typename\n      SelectFilterDefault: default\n      name\n      values\n    }\n    ... on TriStateFilter {\n      type: __typename\n      TriStateFilterDefault: default\n      name\n    }\n    ... on TextFilter {\n      type: __typename\n      TextFilterDefault: default\n      name\n    }\n    ... on SortFilter {\n      type: __typename\n      SortFilterDefault: default {\n        ascending\n        index\n        __typename\n      }\n      name\n      values\n    }\n    ... on SeparatorFilter {\n      type: __typename\n      name\n    }\n    ... on GroupFilter {\n      type: __typename\n      name\n      filters {\n        ... on CheckBoxFilter {\n          type: __typename\n          CheckBoxFilterDefault: default\n          name\n        }\n        ... on HeaderFilter {\n          type: __typename\n          name\n        }\n        ... on SelectFilter {\n          type: __typename\n          SelectFilterDefault: default\n          name\n          values\n        }\n        ... on TriStateFilter {\n          type: __typename\n          TriStateFilterDefault: default\n          name\n        }\n        ... on TextFilter {\n          type: __typename\n          TextFilterDefault: default\n          name\n        }\n        ... on SortFilter {\n          type: __typename\n          SortFilterDefault: default {\n            ascending\n            index\n            __typename\n          }\n          name\n          values\n        }\n        ... on SeparatorFilter {\n          type: __typename\n          name\n        }\n        __typename\n      }\n    }\n    __typename\n  }\n  __typename\n}\n\nquery GET_SOURCE_BROWSE($id: LongString!) {\n  source(id: $id) {\n    ...SOURCE_BROWSE_FIELDS\n    __typename\n  }\n}"}